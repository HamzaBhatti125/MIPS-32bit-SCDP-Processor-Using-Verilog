
LabADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000100  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000770  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000069b  00000000  00000000  00000960  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c2  00000000  00000000  00000ffb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000012c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036c  00000000  00000000  00001304  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000af  00000000  00000000  00001670  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000171f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   8:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  10:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  14:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  18:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  1c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  20:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  24:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  28:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  2c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  30:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  34:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  38:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  3c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  40:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  44:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  48:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  4c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  50:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  54:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  58:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  5c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  60:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  64:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  68:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  6c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61
  7c:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  80:	0c 94 7e 00 	jmp	0xfc	; 0xfc <_exit>

00000084 <__bad_interrupt>:
  84:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000088 <read_adc>:

void read_adc(void)
{
	
	char num = 0;
	PORTB = PORTB| 0b00100010;
  88:	88 b3       	in	r24, 0x18	; 24
  8a:	82 62       	ori	r24, 0x22	; 34
  8c:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	2f ef       	ldi	r18, 0xFF	; 255
  90:	30 e7       	ldi	r19, 0x70	; 112
  92:	82 e0       	ldi	r24, 0x02	; 2
  94:	21 50       	subi	r18, 0x01	; 1
  96:	30 40       	sbci	r19, 0x00	; 0
  98:	80 40       	sbci	r24, 0x00	; 0
  9a:	e1 f7       	brne	.-8      	; 0x94 <read_adc+0xc>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <read_adc+0x16>
  9e:	00 00       	nop
	_delay_ms(100);
	PORTB = PORTB & 0b11011101;
  a0:	88 b3       	in	r24, 0x18	; 24
  a2:	8d 7d       	andi	r24, 0xDD	; 221
  a4:	88 bb       	out	0x18, r24	; 24
	while((PINB & 0b00110111) == 1);
  a6:	86 b3       	in	r24, 0x16	; 22
  a8:	87 73       	andi	r24, 0x37	; 55
  aa:	81 30       	cpi	r24, 0x01	; 1
  ac:	e1 f3       	breq	.-8      	; 0xa6 <read_adc+0x1e>
	while((PINB & 0b00110111) == 0);
  ae:	86 b3       	in	r24, 0x16	; 22
  b0:	87 73       	andi	r24, 0x37	; 55
  b2:	e9 f3       	breq	.-6      	; 0xae <read_adc+0x26>
	PORTB = PORTB | (0b00110111);
  b4:	88 b3       	in	r24, 0x18	; 24
  b6:	87 63       	ori	r24, 0x37	; 55
  b8:	88 bb       	out	0x18, r24	; 24
	num = PINC;
  ba:	83 b3       	in	r24, 0x13	; 19
  bc:	9f ef       	ldi	r25, 0xFF	; 255
  be:	21 ee       	ldi	r18, 0xE1	; 225
  c0:	34 e0       	ldi	r19, 0x04	; 4
  c2:	91 50       	subi	r25, 0x01	; 1
  c4:	20 40       	sbci	r18, 0x00	; 0
  c6:	30 40       	sbci	r19, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <read_adc+0x3a>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <read_adc+0x44>
  cc:	00 00       	nop
	_delay_ms(200);
	PORTB = PORTB & (0b11101111);
  ce:	c4 98       	cbi	0x18, 4	; 24
	PORTD = num;
  d0:	82 bb       	out	0x12, r24	; 18
  d2:	08 95       	ret

000000d4 <adc>:
	
}

void adc(void)
{
	PORTE = 0x00;
  d4:	17 b8       	out	0x07, r1	; 7
	read_adc();
  d6:	0e 94 44 00 	call	0x88	; 0x88 <read_adc>
  da:	08 95       	ret

000000dc <main>:
void read_adc(void);


int main(void)
{
    DDRC = 0b00000000;
  dc:	14 ba       	out	0x14, r1	; 20
	DDRE = 0xFF;
  de:	8f ef       	ldi	r24, 0xFF	; 255
  e0:	86 b9       	out	0x06, r24	; 6
	DDRB = 0b00110111;
  e2:	97 e3       	ldi	r25, 0x37	; 55
  e4:	97 bb       	out	0x17, r25	; 23
	DDRD = 0xFF;
  e6:	81 bb       	out	0x11, r24	; 17
	//TCCR2 |= (1 << WGM20 ) | (1 << WGM21) | (1 << COM21) | (1<<CS20);
	TCCR0 |=(1<<WGM01)  | (1<<COM00) | (1<<CS00);
  e8:	83 b7       	in	r24, 0x33	; 51
  ea:	89 61       	ori	r24, 0x19	; 25
  ec:	83 bf       	out	0x33, r24	; 51
	OCR0 = 2;
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	81 bf       	out	0x31, r24	; 49
	//int x;
	PORTB = 0b00001000;
  f2:	88 e0       	ldi	r24, 0x08	; 8
  f4:	88 bb       	out	0x18, r24	; 24
	
	
	
    while (1) 
    {
		adc();
  f6:	0e 94 6a 00 	call	0xd4	; 0xd4 <adc>
  fa:	fd cf       	rjmp	.-6      	; 0xf6 <main+0x1a>

000000fc <_exit>:
  fc:	f8 94       	cli

000000fe <__stop_program>:
  fe:	ff cf       	rjmp	.-2      	; 0xfe <__stop_program>
