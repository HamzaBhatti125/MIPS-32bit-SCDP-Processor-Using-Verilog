
try.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000069d  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000060a  00000000  00000000  0000086d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000026e  00000000  00000000  00000e77  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000010e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000336  00000000  00000000  0000111c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000021  00000000  00000000  00001452  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001473  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   8:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  10:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  14:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  18:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  1c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  20:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  24:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  28:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  2c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  30:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  34:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  38:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  3c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  40:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  44:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  48:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  4c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  50:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  54:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  58:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  5c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  60:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  64:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  68:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  6c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61
  7c:	0e 94 4f 00 	call	0x9e	; 0x9e <main>
  80:	0c 94 72 00 	jmp	0xe4	; 0xe4 <_exit>

00000084 <__bad_interrupt>:
  84:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000088 <CLOC1>:
	}
}

// function of clock
void CLOC1(void){
	if (TCNT1>=50)
  88:	8c b5       	in	r24, 0x2c	; 44
  8a:	9d b5       	in	r25, 0x2d	; 45
  8c:	c2 97       	sbiw	r24, 0x32	; 50
  8e:	30 f0       	brcs	.+12     	; 0x9c <CLOC1+0x14>
	{
		PORTD^=(1<<CLOC);
  90:	92 b3       	in	r25, 0x12	; 18
  92:	80 e1       	ldi	r24, 0x10	; 16
  94:	89 27       	eor	r24, r25
  96:	82 bb       	out	0x12, r24	; 18
		TCNT1 = 0;
  98:	1d bc       	out	0x2d, r1	; 45
  9a:	1c bc       	out	0x2c, r1	; 44
  9c:	08 95       	ret

0000009e <main>:
void CLOC1(void);

int main(void)

{	
	DDRC = 0x00; // Pin defined for reading ADC input 
  9e:	14 ba       	out	0x14, r1	; 20
	DDRB = 0x01; //Setting pin for OCR0
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	87 bb       	out	0x17, r24	; 23
	DDRD|= (1<<CLOC); //Setting Clock pin
  a4:	8c 9a       	sbi	0x11, 4	; 17
	TCCR0|= (1<<WGM00)|(0<<WGM01)|(1<<CS00)|(1<<COM01)|(0<<COM00); //PWM setting output
  a6:	83 b7       	in	r24, 0x33	; 51
  a8:	81 66       	ori	r24, 0x61	; 97
  aa:	83 bf       	out	0x33, r24	; 51
	TCCR1B = (1<<CS12)|((1<<CS10));
  ac:	85 e0       	ldi	r24, 0x05	; 5
  ae:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 0;     //counter pin 
  b0:	1d bc       	out	0x2d, r1	; 45
  b2:	1c bc       	out	0x2c, r1	; 44
		else if ((value>128)&&(value<=193))
		{
			OCR0 = 160;
		}
		else{
			OCR0 = 255;
  b4:	0f ef       	ldi	r16, 0xFF	; 255
		{
			OCR0 = 80;
		}
		else if ((value>128)&&(value<=193))
		{
			OCR0 = 160;
  b6:	10 ea       	ldi	r17, 0xA0	; 160
		{
			OCR0 = 10;
		}
		else if ((value>64)&&(value<=128))
		{
			OCR0 = 80;
  b8:	d0 e5       	ldi	r29, 0x50	; 80
		value = PINC; // saving readings
		
		//comparing values for ranges
		if (value<=64)
		{
			OCR0 = 10;
  ba:	ca e0       	ldi	r28, 0x0A	; 10
	TCNT1 = 0;     //counter pin 
    char value;    // Variable for reading for ADC
    while (1) 
    {	
		
		CLOC1(); // giving clock to ADC for reading values
  bc:	0e 94 44 00 	call	0x88	; 0x88 <CLOC1>
		value = PINC; // saving readings
  c0:	83 b3       	in	r24, 0x13	; 19
		
		//comparing values for ranges
		if (value<=64)
  c2:	81 34       	cpi	r24, 0x41	; 65
  c4:	10 f4       	brcc	.+4      	; 0xca <main+0x2c>
		{
			OCR0 = 10;
  c6:	c1 bf       	out	0x31, r28	; 49
  c8:	f9 cf       	rjmp	.-14     	; 0xbc <main+0x1e>
		}
		else if ((value>64)&&(value<=128))
  ca:	9f eb       	ldi	r25, 0xBF	; 191
  cc:	98 0f       	add	r25, r24
  ce:	90 34       	cpi	r25, 0x40	; 64
  d0:	10 f4       	brcc	.+4      	; 0xd6 <main+0x38>
		{
			OCR0 = 80;
  d2:	d1 bf       	out	0x31, r29	; 49
  d4:	f3 cf       	rjmp	.-26     	; 0xbc <main+0x1e>
		}
		else if ((value>128)&&(value<=193))
  d6:	81 58       	subi	r24, 0x81	; 129
  d8:	81 34       	cpi	r24, 0x41	; 65
  da:	10 f4       	brcc	.+4      	; 0xe0 <main+0x42>
		{
			OCR0 = 160;
  dc:	11 bf       	out	0x31, r17	; 49
  de:	ee cf       	rjmp	.-36     	; 0xbc <main+0x1e>
		}
		else{
			OCR0 = 255;
  e0:	01 bf       	out	0x31, r16	; 49
  e2:	ec cf       	rjmp	.-40     	; 0xbc <main+0x1e>

000000e4 <_exit>:
  e4:	f8 94       	cli

000000e6 <__stop_program>:
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <__stop_program>
