
newProjectReturn.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000146  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000146  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000770  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000069b  00000000  00000000  00000954  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d0  00000000  00000000  00000fef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000012c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000380  00000000  00000000  00001304  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000af  00000000  00000000  00001684  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001733  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   8:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  10:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  14:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  18:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  1c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  20:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  24:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  28:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  2c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  30:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  34:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  38:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  3c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  40:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  44:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  48:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  4c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  50:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  54:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  58:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  5c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  60:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  64:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  68:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  6c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61
  7c:	0e 94 64 00 	call	0xc8	; 0xc8 <main>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <_exit>

00000084 <__bad_interrupt>:
  84:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000088 <read_adc>:

void read_adc(void)
{
	
	char num = 0;
	PORTB=PORTB|0b00100100; //ALE and Start 1
  88:	88 b3       	in	r24, 0x18	; 24
  8a:	84 62       	ori	r24, 0x24	; 36
  8c:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	87 ea       	ldi	r24, 0xA7	; 167
  90:	91 e6       	ldi	r25, 0x61	; 97
  92:	01 97       	sbiw	r24, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <read_adc+0xa>
  96:	00 c0       	rjmp	.+0      	; 0x98 <read_adc+0x10>
  98:	00 00       	nop
	_delay_ms(100);
	PORTB=PORTB&0b11011011;// ALE and Start 0
  9a:	88 b3       	in	r24, 0x18	; 24
  9c:	8b 7d       	andi	r24, 0xDB	; 219
  9e:	88 bb       	out	0x18, r24	; 24
	while((PINB&0b00001000)==0b00001000);
  a0:	b3 99       	sbic	0x16, 3	; 22
  a2:	fe cf       	rjmp	.-4      	; 0xa0 <read_adc+0x18>
	while((PINB&0b00001000)==0b00000000);
  a4:	b3 9b       	sbis	0x16, 3	; 22
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <read_adc+0x1c>
	PORTB=PORTB|(0b00010000);
  a8:	c4 9a       	sbi	0x18, 4	; 24
	num=PINC;
  aa:	83 b3       	in	r24, 0x13	; 19
  ac:	ef e4       	ldi	r30, 0x4F	; 79
  ae:	f3 ec       	ldi	r31, 0xC3	; 195
  b0:	31 97       	sbiw	r30, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <read_adc+0x28>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <read_adc+0x2e>
  b6:	00 00       	nop
	_delay_ms(200);
	PORTB=PORTB&(0b11101111);
  b8:	c4 98       	cbi	0x18, 4	; 24
	PORTD = num;
  ba:	82 bb       	out	0x12, r24	; 18
	OCR0 = num;	
  bc:	81 bf       	out	0x31, r24	; 49
  be:	08 95       	ret

000000c0 <adc>:
}// main


void adc(void)
{
	PORTE=0x00; // Line 0 selected
  c0:	17 b8       	out	0x07, r1	; 7
	read_adc();
  c2:	0e 94 44 00 	call	0x88	; 0x88 <read_adc>
  c6:	08 95       	ret

000000c8 <main>:



int main(void)
{
	DDRC=0b00000000; //output of ADC,input to micro controller
  c8:	14 ba       	out	0x14, r1	; 20
	DDRE=0xFF; //PE2=ADDC, PE1=ADDB, PE0=ADDA
  ca:	8f ef       	ldi	r24, 0xFF	; 255
  cc:	86 b9       	out	0x06, r24	; 6
	DDRB=0b00110111; // PB5=ALE, PB2=Start, //PB1=clock, PB3=EOC, PB4=OE, PB0=OC0;
  ce:	97 e3       	ldi	r25, 0x37	; 55
  d0:	97 bb       	out	0x17, r25	; 23
	DDRD=0xFF;  // output from controller to LED bank
  d2:	81 bb       	out	0x11, r24	; 17
	TCCR2|=(1<<WGM21)|(1<<COM20)|(1<<CS20);
  d4:	87 b5       	in	r24, 0x27	; 39
  d6:	89 61       	ori	r24, 0x19	; 25
  d8:	87 bd       	out	0x27, r24	; 39
	OCR2=2;
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	82 bd       	out	0x22, r24	; 34
	//int x;
	//TCNT1 = 0;
	TCCR0 |= (1<<WGM00) | (0<<WGM01) | (1<<CS00)| (0<<COM00) | (1<<COM01) ;
  de:	83 b7       	in	r24, 0x33	; 51
  e0:	81 66       	ori	r24, 0x61	; 97
  e2:	83 bf       	out	0x33, r24	; 51
	PORTB=0b00001000;
  e4:	88 e0       	ldi	r24, 0x08	; 8
  e6:	88 bb       	out	0x18, r24	; 24
	
	
	while(1)
	{
			
		adc();
  e8:	0e 94 60 00 	call	0xc0	; 0xc0 <adc>
  ec:	fd cf       	rjmp	.-6      	; 0xe8 <main+0x20>

000000ee <_exit>:
  ee:	f8 94       	cli

000000f0 <__stop_program>:
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <__stop_program>
